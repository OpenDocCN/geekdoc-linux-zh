- en: Understanding Curly Braces in Regular Expressions or Regex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解正则表达式中的花括号
- en: 原文：[https://techbyexample.com/curly-braces-quantifier-regex/](https://techbyexample.com/curly-braces-quantifier-regex/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/curly-braces-quantifier-regex/](https://techbyexample.com/curly-braces-quantifier-regex/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概述**'
- en: Curly braces act as a repetition quantifier in regex. They specify the number
    of times a character before preceding it can appear in the input string or text.
    They can also be used to specify a range i.e specify the minimum and maximum of
    times a  character can appear.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号在正则表达式中充当重复量词。它们指定了在输入字符串或文本中，前面字符可以出现的次数。它们还可以用来指定一个范围，即指定一个字符出现的最小和最大次数。
- en: Its syntax is
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它的语法是
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里
- en: '**min** denotes the minimum number of times a character can appear'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**min** 表示字符可以出现的最小次数'
- en: '**max** denotes the maximum number of times a character can appear'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**max** 表示字符可以出现的最大次数'
- en: For example
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This specifies that character “a” can appear exactly n times. Similarly for
    the below regex
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了字符“a”可以出现恰好**n**次。类似地，对于下面的正则表达式
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This specifies that any digit can appear exactly n times. Curly braces can also
    be used to define a range.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了任何数字可以出现恰好**n**次。花括号还可以用来定义一个范围。
- en: For example
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '**{m,n}** – Atleast **m** and up to **n** times'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{m,n}** – 至少**m**次，最多**n**次'
- en: '**{m, }** – Atleast **m** times'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{m,}** – 至少**m**次'
- en: '**{, n}** – Upto **n** times'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{, n}** – 最多**n**次'
- en: Let’s see an example for the same in ruby language
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Ruby语言中看一个相同的例子
- en: '**main.ruby**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.ruby**'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By default, curly braces are greedy or non-lazy. What does it mean? They will
    match all the possible characters and always prefers more. It is also possible
    to make the curly braces operator non-greedy or lazy. This can be done by adding
    a question mark after the curly braces operator. Let’s see an example for the
    same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，花括号是贪婪的或非懒惰的。这意味着什么？它们会匹配所有可能的字符，并总是更倾向于匹配更多的字符。也可以通过在花括号操作符后加上问号来使花括号操作符变得非贪婪或懒惰。让我们看一个相同的例子。
- en: As you can see from the output that after adding a question mark operator after
    the curly brace operator, it tries to match the minimum number of characters as
    possible i.e it becomes nongreedy
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从输出中看到的那样，在花括号操作符后加上问号操作符后，它会尽可能匹配最少数量的字符，也就是说，它变成了非贪婪模式。
- en: That is why given regex
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么给定正则表达式
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It gives a match **abb** for all below input strings
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它会为所有以下输入字符串给出匹配结果**abb**
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Program for the same in ruby language
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的Ruby语言程序
- en: '**main.ruby**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.ruby**'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: while
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而
- en: '**ab{2,4}?** will always give match as **abb** for all the above input strings'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**ab{2,4}?** 将始终为所有上述输入字符串匹配**abb**'
- en: Program for the same
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的程序
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Curly braces applied to a grouping**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**花括号应用于分组**'
- en: A part of the regular expression can be placed inside a balanced parenthesis.
    This part is one group now. We can additionally apply curly braces to this group.
    The curly braces will be added after the grouping
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的一部分可以放在一个平衡的圆括号内。这部分现在是一个分组。我们还可以对这个分组应用花括号。花括号会添加到分组之后。
- en: Let’s see an example of the same.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个相同的例子。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Curly Braces applied to a Character Class**'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**花括号应用于字符类**'
- en: Curly Brace quantifier can also be applied to the entire character class. Its
    meaning remains the same though. A character class is represented by square brackets
    in regex. Let’s see a program for the same.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号量词也可以应用于整个字符类。它的含义仍然是一样的。字符类在正则表达式中用方括号表示。让我们看一下相应的程序。
- en: We have below regex in the above program
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有以下正则表达式
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It means it would match a string of length exactly 4 and comprised of characters
    **‘a’** and **‘b’** in any order
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它意味着它将匹配一个长度恰好为4且由字符**‘a’**和**‘b’**组成的字符串，顺序不限。
- en: That is why the regex matches the below string
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么正则表达式匹配了以下字符串
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And it does not match
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它不匹配
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**How to use the curly brace as a literal character in regex. **'
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**如何在正则表达式中将花括号作为字面字符使用。**'
- en: The escaping character can be placed before the opening brace or closing brace
    if they are needed to be used in a literal way.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要将花括号作为字面字符使用，可以在开括号或闭括号前放置转义字符。
- en: A closing brace that is not preceded by an opening is treated as a literal closing
    brace.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个右花括号前面没有左花括号，那么它将被视为字面上的右花括号。
- en: That is all about curly braces in regex in Regex. Hope you have liked this article.
    Please share feedback in the comments
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是正则表达式中关于花括号的所有内容。希望你喜欢这篇文章。如果有任何反馈，请在评论中分享。
