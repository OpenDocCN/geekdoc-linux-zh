- en: Non-Overlapping intervals program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非重叠区间程序
- en: 原文：[https://techbyexample.com/non-overlapping-intervals-program/](https://techbyexample.com/non-overlapping-intervals-program/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/non-overlapping-intervals-program/](https://techbyexample.com/non-overlapping-intervals-program/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: An array of intervals is given where intervals[i] = [starti, endi]. We have
    to find out the minimum number of intervals to remove so that the interval in
    the intervals array become non-overlapping
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个区间数组，其中 intervals[i] = [starti, endi]。我们需要找出最少需要移除的区间数量，以使得区间数组中的区间变得不重叠。
- en: Let’s understand it with an example
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The idea is to first sort based interval start time and then count the overlapping
    intervals.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个思路是先根据区间的开始时间排序，然后计算重叠的区间。
- en: '**Program**'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
