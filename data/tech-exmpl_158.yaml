- en: How to run os commands in python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Python 中运行操作系统命令
- en: 原文：[https://techbyexample.com/how-to-run-os-commands-in-python/](https://techbyexample.com/how-to-run-os-commands-in-python/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/how-to-run-os-commands-in-python/](https://techbyexample.com/how-to-run-os-commands-in-python/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: There are many ways but I am going to discuss two popular methods to do it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以实现，但我将讨论两种流行的方法。
- en: '**os.system**'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**os.system**'
- en: '**subprocess.Popen**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**subprocess.Popen**'
- en: '**os.system**'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**os.system**'
- en: It executes the string command in subshell by calling the standard C function
    i.e. **system()**. It has some limitations like Changes to **sys.stdin** etc.
    are not reflected in the environment of the executed command. It only returns
    the **exit code**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过调用标准 C 函数 **system()** 在子 shell 中执行字符串命令。它有一些限制，例如 **sys.stdin** 等的更改不会反映在执行命令的环境中。它仅返回
    **退出码**。
- en: '**0** – exit code 0 means the command runs successfully.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**0** – 退出码为 0 表示命令执行成功。'
- en: '**Non 0** – exit code other than 0 means command produced some error.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**非 0** – 退出码为 0 以外的值表示命令产生了某些错误。'
- en: Note:- On Unix, the return value is the exit status of the process encoded in
    the format specified for the wait method.  On Windows, the return value is returned
    by the system shell.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在 Unix 上，返回值是进程的退出状态，按 wait 方法指定的格式编码。在 Windows 上，返回值由系统 shell 返回。
- en: '**Syntax**:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example: Run a OS command**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：运行操作系统命令**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**subprocess module**'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**subprocess 模块**'
- en: So when you want the output of the command then you use the subprocess module.
    It has inbuilt various methods like call, Popen which comes with greater capabilities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当您需要命令的输出时，可以使用 subprocess 模块。它内置了多种方法，如 call、Popen，具有更强大的功能。
- en: '**subprocess.Popen** – Execute a child program in a new process.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**subprocess.Popen** – 在新进程中执行子程序。'
- en: This module allows you to spawn new processes, connect to their input/output/error
    pipes, and obtain their **outputs, errors, and return codes**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块允许您生成新的进程，连接其输入/输出/错误管道，并获取它们的 **输出、错误和返回码**。
- en: '**Syntax**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '***args**** –  *Sequence of program arguments or a single string'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***args*** – 程序参数的序列或一个字符串'
- en: '***bufsize*** – Increase bufsize in case of experience performance issues, 
    You can set *bufsize* to either -1 or a large enough positive value (such as 4096).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***bufsize*** – 在遇到性能问题时增加缓冲区大小，您可以将 *bufsize* 设置为 -1 或一个足够大的正值（例如 4096）。'
- en: '***preexec_fn*** – This object will be called in the child process just before
    the child is executed. (Unix only)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***preexec_fn*** – 该对象将在子进程执行之前被调用。（仅限 Unix）'
- en: '***close_fds***(**True/False**) – if True, Close all file descriptors except **0**, **1** and **2** before
    the child process is executed. (Unix only). Note that on Windows, you cannot set *close_fds* to
    true'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***close_fds*** (**True/False**) – 如果为 True，则在子进程执行之前，关闭所有文件描述符，除了 **0**、**1**
    和 **2**。（仅限 Unix）。注意，在 Windows 上，您不能将 *close_fds* 设置为 true。'
- en: '***cwd***  –  Change current working directory of the child’s process.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***cwd*** – 更改子进程的当前工作目录。'
- en: '***env***  –  If you don’t want to inherit the current process’s environment,
    which is the default behavior then use this param to pass the environment to the
    child process.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***env*** – 如果您不想继承当前进程的环境（默认行为），可以使用此参数将环境传递给子进程。'
- en: '***universal_newlines*** (**True/False**)  –  If True, then stderr and stout
    will be treated in universal newlines.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***universal_newlines*** (**True/False**) – 如果为 True，则 stderr 和 stout 将采用通用换行符格式处理。'
- en: '**Note:**   Passing **shell=True** can be a security hazard and also need shell-type
    formatting before running the command, so be cautious.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 传递 **shell=True** 可能会带来安全风险，并且在运行命令之前需要使用 shell 类型的格式，因此需要小心。'
- en: '**Example 1: Read the output of the command:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1：读取命令的输出：**'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Example 2: We can pass command with arguments in a list**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2：我们可以在列表中传递带有参数的命令**'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Example 3: We can pass command in a string directly.**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 3：我们可以直接在字符串中传递命令。**'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[os](https://techbyexample.com/tag/os/)*   [python](https://techbyexample.com/tag/python/)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[os](https://techbyexample.com/tag/os/)*   [python](https://techbyexample.com/tag/python/)'
