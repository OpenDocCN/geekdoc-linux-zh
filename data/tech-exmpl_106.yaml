- en: Postorder traversal of a Binary Tree￼
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二叉树的后序遍历￼
- en: 原文：[https://techbyexample.com/postorder-traversal-binary-tree/](https://techbyexample.com/postorder-traversal-binary-tree/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/postorder-traversal-binary-tree/](https://techbyexample.com/postorder-traversal-binary-tree/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: In the postorder traversal of a binary tree, we follow the below order
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在二叉树的后序遍历中，我们遵循以下顺序
- en: Vist Left Subtree
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问左子树
- en: Visit Right Subtree
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问右子树
- en: Visit Root
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问根节点
- en: For example, let’s say we have below binary tree
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有下面的二叉树
- en: '![](../Images/0a326e4e3810e8771142ce8b6cef7429.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a326e4e3810e8771142ce8b6cef7429.png)'
- en: Then postorder traversal would be
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后后序遍历将是
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Program**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的程序
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
