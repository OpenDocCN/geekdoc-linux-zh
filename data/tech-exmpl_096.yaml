- en: Program to detect cycle start node in a linked list
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测链表中循环起始节点的程序
- en: 原文：[https://techbyexample.com/program-detect-cycle-linked-list/](https://techbyexample.com/program-detect-cycle-linked-list/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/program-detect-cycle-linked-list/](https://techbyexample.com/program-detect-cycle-linked-list/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: The objective is to find out the cycle start node in a given linked list. A
    cycle exists in a linked list if  the last node in the linked list points to another
    node in the front
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是找出给定链表中的循环起始节点。如果链表中的最后一个节点指向前面的某个节点，则链表中存在循环。
- en: Example
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](../Images/31d74a94feb5baa6a07151b35d2b3abb.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31d74a94feb5baa6a07151b35d2b3abb.png)'
- en: The linked list above has a cycle. The cycle start node is node 2\. Below is
    the approach we can follow
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的链表有一个循环，循环的起始节点是节点 2。下面是我们可以遵循的方法。
- en: First, detect whether the given linked list has a cycle or not. Have two pointers.
    One is the slow pointer and the other is a fast pointer. Both point to the head
    node initially
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，检测给定的链表是否有循环。使用两个指针，一个是慢指针，另一个是快指针。两者最初都指向头节点。
- en: Now move the slow pointer by 1 node and move the fast pointer by 2 nodes.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，慢指针每次移动 1 个节点，快指针每次移动 2 个节点。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If slow and fast pointers are the same at any point in time then the linked
    list has cyle.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果慢指针和快指针在任何时刻相同，则说明链表中有循环。
- en: The fast pointer and a slow pointer can only meet at a node that is in the cycle.
    Let’s assume they meet at node 3\. Now get the length of the cycle. The length
    is 3
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快指针和慢指针只能在循环内的某个节点相遇。假设它们在节点 3 相遇。现在，获取循环的长度。长度是 3。
- en: Then keep one pointer at the head of the node and the other pointer at a distance
    of cycle length from it. So one pointer will be added at node 1 and another pointer
    will be at node 4.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，将一个指针保持在头节点，另一个指针与它保持与循环长度相等的距离。所以，一个指针将位于节点 1，另一个指针将位于节点 4。
- en: Move both the pointers until they are the same. They will meet at the cycle
    start node which is Node 2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动两个指针，直到它们相同。它们将在循环的起始节点相遇，该节点是节点 2。
- en: '**Program**'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
