- en: Range Sum Array Program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区间和数组程序
- en: 原文：[https://techbyexample.com/range-sum-array-program/](https://techbyexample.com/range-sum-array-program/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/range-sum-array-program/](https://techbyexample.com/range-sum-array-program/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: There is an array of numbers that are given. The objective is to find the range
    sum in that given array. What does it mean that a range will be given which will
    have a left index and a right index. And we have to find the sum between the left
    index and the right index in the given array of numbers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定了一个数字数组。目标是找到该数组中的区间和。这意味着会给出一个区间，其中包含左索引和右索引。我们需要在给定的数字数组中找到左索引和右索引之间的总和。
- en: Seem simple right. Just iterate from the left index to the right index in the
    given array and return the sum. But here is the catch. Allowed TC is O(1)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很简单，对吧？只需从给定数组的左索引遍历到右索引并返回总和。但问题在于，允许的时间复杂度是 O(1)。
- en: Here is the approach we can follow so that we are able to return the answer
    in O(1) time complexity
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们可以遵循的方法，以便能够在 O(1) 时间复杂度内返回答案。
- en: Pre compute another sum_array from the given array of numbers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从给定的数字数组中预先计算出另一个 sum_array。
- en: sum_array[i] = sum of numbers from the 0 index to the ith  index.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sum_array[i] = 从索引 0 到索引 i 的数字之和。
- en: For a given range with left index and right index  simply return sum_array[left-1]
    – sum_array[right]. Of course, we need to validate that left-1 is greater than
    or equal to zero.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定的区间，包含左索引和右索引，只需返回 sum_array[left-1] – sum_array[right]。当然，我们需要验证 left-1
    是否大于或等于零。
- en: '**Program**'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的程序。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
