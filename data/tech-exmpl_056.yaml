- en: Maximum Length of Contiguous Subarray with an equal number of 0’s and 1’s
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大长度的连续子数组，包含相等数量的 0 和 1。
- en: 原文：[https://techbyexample.com/max-length-array-zero-one/](https://techbyexample.com/max-length-array-zero-one/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/max-length-array-zero-one/](https://techbyexample.com/max-length-array-zero-one/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概览**'
- en: An array is given that only has 0’s and 1’s. The objective is to find a maximum
    length subarray with an equal number of 0’s and 1’s. Let’s understand it with
    examples
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数组，其中仅包含 0 和 1。目标是找到一个最大长度的子数组，包含相等数量的 0 和 1。让我们通过示例来理解。
- en: Example 1
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example 2
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Below is the approach we can take
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们可以采用的方法
- en: We will create an array **leftSum** where leftSum[i] will denote the sum of
    numbers from index 0 to i. Treat 0 as -1 and 1 as 1 only.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将创建一个数组 **leftSum**，其中 leftSum[i] 表示从索引 0 到 i 的数字之和。将 0 视为 -1，1 视为 1。
- en: Now there are two cases. The subarray starts from index 0 or the subarray starts
    from an index other than zero.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在有两种情况。子数组要么从索引 0 开始，要么从其他非零的索引开始。
- en: Scan the leftSum array from left to right. If the value at any index in the
    **leftSum** is zero, then it means that subarray[0,i] contains an equal number
    of 0’s and 1’s.  This will give the answer if the subarray starts from index 0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从左到右扫描 `leftSum` 数组。如果 `leftSum` 数组中某个索引的值为零，那么意味着子数组[0,i]中包含相等数量的 0 和 1。这将给出子数组从索引
    0 开始的答案。
- en: If the subarray doesn’t start from zero. So again scan the leftSum array and
    find index **i** and **j** such that **leftSum[i] == leftSum[j].** To figure it
    out we will use a map. If the length of j-i is greater than the maximum length,
    then update the maximum length
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果子数组不是从零开始的。再次扫描 `leftSum` 数组，找到索引 **i** 和 **j**，使得 **leftSum[i] == leftSum[j]**。为了找出这个情况，我们将使用一个映射。如果
    j-i 的长度大于当前最大长度，则更新最大长度。
- en: Return the maximum length in the end
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后返回最大长度
- en: '**Program**'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相应的程序。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
