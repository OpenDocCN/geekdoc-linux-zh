- en: Count unreachable pair of nodes in an undirected graph
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算无向图中无法互通的节点对数量
- en: 原文：[https://techbyexample.com/count-unreachable-pair-nodes/](https://techbyexample.com/count-unreachable-pair-nodes/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/count-unreachable-pair-nodes/](https://techbyexample.com/count-unreachable-pair-nodes/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概述**'
- en: An integer n is given. There are n  nodes numbered 0 to n-1.  A 2D integer array
    **edges** is also given where **edges[i] = [ai, bi]** means that there is an undirected
    node from ai to bi.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个整数 n，表示节点的数量，节点编号从 0 到 n-1。还给定了一个二维整数数组 **edges**，其中 **edges[i] = [ai, bi]**
    表示从 ai 到 bi 之间存在一条无向边。
- en: The  objective is  to  find the  number of pairs of nodes that are unreachable
    from each other
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是找出彼此无法互通的节点对的数量
- en: '**Example 1**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Graph**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**图**'
- en: '![](../Images/db5700d230ccfd96ce0f1930204ddfcb.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db5700d230ccfd96ce0f1930204ddfcb.png)'
- en: '**Output**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '2'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: We  have  two pairs that are not connected
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两对节点是未连接的
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Example 2**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Graph**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图**'
- en: '![](../Images/7ac486d0d61acbbe0708461cc6d8542e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ac486d0d61acbbe0708461cc6d8542e.png)'
- en: '**Output:**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '**26**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**26**'
- en: We  have  26 pairs that are not connected
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有 26 对节点是未连接的
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Idea is to do a DFS  from each of the nodes which are not visited to identify
    the number of nodes in each connected graph within the disconnected graph. For
    example, above, the number of nodes in each connected graph is
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个思路是从每个未访问的节点开始进行深度优先搜索（DFS），以识别断开图中每个连接图的节点数量。例如，上图中，每个连接图的节点数量是
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then we simply find the number of pairs from each connected graph
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们只需找到每个已连接图中节点对的数量
- en: '**Program**'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现此逻辑的程序
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。本系列教程内容详尽，涵盖了所有概念，并附有示例。这篇教程适合那些希望深入学习 Golang，提升专业技能并获得扎实理解的读者
    – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式。如果是的话，那么这篇文章适合你 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，也可以查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
