- en: LRU Cache Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LRU 缓存设计。
- en: 原文：[https://techbyexample.com/lru-cache-design/](https://techbyexample.com/lru-cache-design/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/lru-cache-design/](https://techbyexample.com/lru-cache-design/)
- en: Table of Contents
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '[Overview](#Overview "Overview")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[概述](#Overview "Overview")'
- en: '[Set(key int, value int)](#Setkey_int_value_int "Set(key int, value int)")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Set(key int, value int)](#Setkey_int_value_int "Set(key int, value int)") '
- en: '[Get(key int)](#Getkey_int "Get(key int)")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Get(key int)](#Getkey_int "Get(key int)")'
- en: '[Low-Level Design](#Low-Level_Design "Low-Level Design")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[低级设计](#Low-Level_Design "Low-Level Design")'
- en: '[UML Diagram](#UML_Diagram "UML Diagram")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[UML 图](#UML_Diagram "UML Diagram")'
- en: '[Program](#Program "Program")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")'
- en: '[Conclusion](#Conclusion "Conclusion")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#Conclusion "Conclusion")'
- en: '**Overview**'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: In this tutorial, we are also going to consider the **FIFO** approach in our
    design as well other than **LRU** so that the design is flexible enough to switch
    to any algorithm at run time
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们还将考虑在设计中使用 **FIFO** 方法，除了 **LRU** 之外，以确保设计在运行时可以灵活地切换到任何算法。
- en: The objective is to Design an in-memory cache. Below are the requirements
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是设计一个内存缓存。以下是要求：
- en: It should support **Set** and **Get** Operation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该支持 **Set** 和 **Get** 操作。
- en: O(1) Time Complexity for both **Set** and **Get**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Set** 和 **Get** 操作的时间复杂度为 O(1)。'
- en: Assume the maximum capacity of the cache is 3\. Once the cache is full and there
    is one more key to be inserted then one of the existing entries needs to be deleted
    from the cache
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设缓存的最大容量是 3。一旦缓存已满且需要插入一个新键时，必须从缓存中删除一个现有条目。
- en: Deletion should be based on eviction algorithm – FIFO or LRU
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除操作应该基于逐出算法 —— FIFO 或 LRU。
- en: Assume key and value in the cache are of type string
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设缓存中的键和值的类型为字符串。
- en: The eviction Algorithm it should support is **First-In-First-Out(FIFO)** and
    **Least Recently Used (LRU)**
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该支持的逐出算法是 **先进先出（FIFO）** 和 **最近最少使用（LRU）**。
- en: The Eviction Algorithm should be pluggable. That means that you should be able
    to change your eviction algorithm at runtime.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐出算法应该是可插拔的。这意味着你应该能够在运行时更改逐出算法。
- en: Below are the high-level things we will have in our design
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们设计中的高级内容：
- en: We will have a **Cache** class that will act as an interface for interacting
    with the client
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将有一个 **Cache** 类，作为与客户端交互的接口。
- en: '**Cache** class will be using a combination of a **Map** and a **Doubly-linked
    List** for storing everything. Both map and doubly-linked list are used so that
    get and set are of  O(1) even with evictions. How this is achieved, we will later
    in this tutorial.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cache** 类将使用 **Map** 和 **双向链表** 的组合来存储所有内容。使用这两种数据结构，确保在逐出操作时，**Get** 和 **Set**
    操作的时间复杂度仍为 O(1)。我们将在本教程后面详细介绍如何实现这一点。'
- en: The **Map** will have the key of type string and the value of the type pointer
    to a node in the **Doubly-linked List**
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Map** 将具有类型为字符串的键和类型为指向 **双向链表** 中节点的指针的值。'
- en: Each node of the **Doubly Linked List** will contain the key as well as value.
    Each node will also have a pointer to the previous node in the double linked list
    and a pointer to the next node in the **doubly linked list**
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双向链表** 的每个节点将包含键和值。每个节点还会有指向前一个节点的指针以及指向下一个节点的指针，在 **双向链表** 中。'
- en: There will be an **evictionAlgorithm** interface. There will be **LRU** and
    **FIFO** class which implements this **evictionAlgorithm** Interface
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有一个 **evictionAlgorithm** 接口。将会有 **LRU** 和 **FIFO** 类实现该 **evictionAlgorithm**
    接口。
- en: Cache class will also embed an instance of **evictionAlgorithm** interface.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cache** 类还会嵌入一个 **evictionAlgorithm** 接口实例。'
- en: '**evictionAlgorithm** interface exists to decouple our **Cache** class with
    the algorithm such that we should be able to change the algorithm at run time.
    Also **Cache** class should not change when a new algorithm is being added. This
    is where **Strategy DesignPattern** comes into the picture. The strategy pattern
    suggests creating a family of the algorithm with each algorithm having its own
    class. Each of these classes follows the same interface and this makes the algorithm
    interchangeable within the family. Let’s say the common interface name is **evictionAlgo**.
    Then **FIFO** and **LRU** classes will implement this interface.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**evictionAlgorithm** 接口存在的目的是将 **Cache** 类与算法解耦，以便我们能够在运行时更改算法。此外，当添加新算法时，**Cache**
    类不应发生变化。这就是 **策略设计模式** 的应用场景。策略模式建议创建一组算法，每个算法有自己独立的类。这些类遵循相同的接口，使得算法可以在同一家族内互换。假设公共接口名称为
    **evictionAlgo**，那么 **FIFO** 和 **LRU** 类将实现此接口。'
- en: Now our main **Cache** class will embed **evictionAlgo** interface. Instead
    of implementing all types of eviction algorithms in itself, our Cache class will
    delegate all of them to the **evictionAlgo** interface. Since evictionAlgo is
    an interface, we can run time change the algorithm to either be LRU, or FIFO without
    any change in Cache class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的主 **Cache** 类将嵌入 **evictionAlgo** 接口。我们的缓存类不会实现所有类型的驱逐算法，而是将所有算法委托给 **evictionAlgo**
    接口。由于 evictionAlgo 是一个接口，我们可以在运行时将算法切换为 LRU 或 FIFO，而无需修改 Cache 类。
- en: Also, we will use the Factory Design Pattern to create the instance of each
    of the algorithms ie. FIFO, LRU
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们将使用工厂设计模式来创建每个算法的实例，例如 FIFO、LRU。
- en: Let’s see how Get and Set are going to work in O(1) time
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Get 和 Set 如何在 O(1) 时间内工作。
- en: '**Set(key int, value int)**'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Set(key int, value int)**'
- en: For any set operation, it will first create a doubly-linked list node with key
    and value supplied. Then an entry will be made into the map with key as the input
    key and value as the address of the node. Once the node is created, then there
    are two cases
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何 set 操作，它将首先创建一个包含输入的键和值的双向链表节点。然后会在映射中创建一个条目，其中键是输入的键，值是节点的地址。一旦节点创建完成，就会有两种情况。
- en: '**The cache is not full** –  In this case, it will pass the control to the
    current evictionAlgorithm interface. The evictionAlgorithm interface is going
    to do insert that node in a double-linked list either at the end or at the front
    depending upon the current eviction algorithm. Every operation is O(1) here'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存未满** – 在这种情况下，它将控制权交给当前的 evictionAlgorithm 接口。evictionAlgorithm 接口将根据当前的驱逐算法，将节点插入到双向链表的末尾或前端。这里的每个操作都是
    O(1)。'
- en: '**The cache is full** – In this case, it will pass the control to the current
    evictionAlgorithm interface to evict one of the nodes based upon the current eviction
    Algorithm. Once that node is evicted it will insert the new node. Every operation
    is O(1) here'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存已满** – 在这种情况下，它将控制权交给当前的 evictionAlgorithm 接口，根据当前的驱逐算法驱逐一个节点。一旦该节点被驱逐，它将插入新节点。这里的每个操作都是
    O(1)。'
- en: '**Get(key int)**'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Get(key int)**'
- en: For any Get operation, it will first check the map if the given key exists.
    If it exists then it will fetch the address of the node pointed to by key in the
    map. It will then fetch the value from the node. Then it will pass the control
    to the current evictionAlgorithm interface. The evictionAlgorithm interface is
    going to shuffle the current node in the doubly-linked list either at the end
    or front depending upon the current eviction algorithm. Every operation is O(1)
    here.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何 Get 操作，它首先会检查映射中是否存在给定的键。如果存在，它将获取映射中由该键指向的节点的地址。然后，它会从该节点中获取值。接下来，它会将控制权交给当前的
    evictionAlgorithm 接口。evictionAlgorithm 接口将根据当前的驱逐算法，将当前节点在双向链表中移动到末尾或前端。这里的每个操作都是
    O(1)。
- en: '**Low-Level Design**'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**低级设计**'
- en: Below is the low-level design expressed in go programming language. Later we
    will see a UML diagram as well as a working example
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用 Go 编程语言表达的低级设计。稍后我们还将看到 UML 图以及一个工作示例。
- en: '**Cache Class**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存类**'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Doubly Linked List**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**双向链表**'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Eviction Algorithm Interface**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱逐算法接口**'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**FIFO Algorithm** – It implements the Eviction Algorithm Interface'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIFO 算法** – 它实现了驱逐算法接口'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**LRU Algorithm** – It implements the Eviction Algorithm Interface'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**LRU 算法** – 它实现了驱逐算法接口'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**UML Diagram**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**UML 图**'
- en: '![](../Images/93ba75ea015d9c055a7f090acda77d83.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93ba75ea015d9c055a7f090acda77d83.png)'
- en: '**Program**'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the full working code in go programming language if anyone is interested.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完整的 Go 编程语言代码，如果有任何人感兴趣的话。
- en: '**doublylinklist.go**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**doublylinklist.go**'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**evictionAlgorithm.go**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**evictionAlgorithm.go**'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**lru.go**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**lru.go**'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**fifo.go**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**fifo.go**'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**cache.go**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**cache.go**'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**main.go**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Conclusion**'
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about designing an In-Memory Cache. Hope you have liked this article.
    Please share feedback in the comments
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是设计内存缓存的全部内容。希望你喜欢这篇文章。如果有任何反馈，请在评论中分享。
- en: '[cache](https://techbyexample.com/tag/cache/)*   [lru](https://techbyexample.com/tag/lru/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[cache](https://techbyexample.com/tag/cache/)*   [lru](https://techbyexample.com/tag/lru/)'
