- en: Program to detect cycle start node in a linked list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/program-detect-cycle-linked-list/](https://techbyexample.com/program-detect-cycle-linked-list/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objective is to find out the cycle start node in a given linked list. A
    cycle exists in a linked list if  the last node in the linked list points to another
    node in the front
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31d74a94feb5baa6a07151b35d2b3abb.png)'
  prefs: []
  type: TYPE_IMG
- en: The linked list above has a cycle. The cycle start node is node 2\. Below is
    the approach we can follow
  prefs: []
  type: TYPE_NORMAL
- en: First, detect whether the given linked list has a cycle or not. Have two pointers.
    One is the slow pointer and the other is a fast pointer. Both point to the head
    node initially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now move the slow pointer by 1 node and move the fast pointer by 2 nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If slow and fast pointers are the same at any point in time then the linked
    list has cyle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fast pointer and a slow pointer can only meet at a node that is in the cycle.
    Let’s assume they meet at node 3\. Now get the length of the cycle. The length
    is 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then keep one pointer at the head of the node and the other pointer at a distance
    of cycle length from it. So one pointer will be added at node 1 and another pointer
    will be at node 4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move both the pointers until they are the same. They will meet at the cycle
    start node which is Node 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
