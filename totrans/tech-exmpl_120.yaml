- en: Group anagrams together program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/group-anagrams-together-program/](https://techbyexample.com/group-anagrams-together-program/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given an array of strings, write a program to group all anagrams together. 
    From Wikipedia
  prefs: []
  type: TYPE_NORMAL
- en: An **anagram** is a word or phrase formed by rearranging the letters of a different
    word or phrase, typically using all the original letters exactly once. For example,
    the word *anagram* itself can be rearranged into *nag a ram*, also the word *binary* into *brainy*^, and
    the word *adobe* into the *abode*.
  prefs: []
  type: TYPE_NORMAL
- en: For eg
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Below will the strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the original array. Sort each string in the duplicate array. After
    sorting the duplicate array will look like this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a map to store the output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Build a trie for the above duplicate array with all strings sorted. Update the
    map above after inserting each element. Map should look like as below for “art”
    as art has its anagrams at 0,2 and 5 positions in the original array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over the map and print the output by indexing in the input array of
    strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
