["```go\ntype atmMachine struct {\n\thasMoney      state\n\tnoMoney       state\n\tamountEntered state\n\tpinEntered    state\n\n\tcurrentState state\n\n\ttotalMoney int\n}\n\nfunc newATMMachine(totalMoney int) *atmMachine {\n\ta := &atmMachine{\n\t\ttotalMoney: totalMoney,\n\t}\n\thasMoneyState := &hasMoneyState{\n\t\tatmMachine: a,\n\t}\n\tnoMoneyState := &noMoneyState{\n\t\tatmMachine: a,\n\t}\n\tamountEnteredState := &amountEnteredState{\n\t\tatmMachine: a,\n\t}\n\tpinEnteredState := &pinEnteredState{\n\t\tatmMachine: a,\n\t}\n\n\ta.setState(hasMoneyState)\n\ta.hasMoney = hasMoneyState\n\ta.noMoney = noMoneyState\n\ta.amountEntered = amountEnteredState\n\ta.pinEntered = pinEnteredState\n\treturn a\n}\n\nfunc (v *atmMachine) addMoney(money int) error \n\nfunc (v *atmMachine) enterAmount(money int) error \n\nfunc (v *atmMachine) enterPin(money int) error \n\nfunc (v *atmMachine) dispenseCash(money int) error \n\nfunc (v *atmMachine) setState(s state) \n\nfunc (v *atmMachine) incrementMoney(money int)\n\nfunc (v *atmMachine) decrementMoney(money int) \n\nfunc (v *atmMachine) checkAvailability(money int) error \n\nfunc (v *atmMachine) verifyPin(pin int) error\n```", "```go\ntype state interface {\n\tstateName() string\n\taddMoney(int) error\n\tenterAmount(int) error\n\tenterPin(int) error\n\tdispenseCash(int) error\n}\n```", "```go\ntype noMoneyState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *noMoneyState) stateName() string \n\nfunc (i *noMoneyState) addMoney(money int) error\n\nfunc (i *noMoneyState) enterAmount(money int) error \n\nfunc (i *noMoneyState) enterPin(pin int) error \n\nfunc (i *noMoneyState) dispenseCash(money int) error \n```", "```go\ntype hasMoneyState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *hasMoneyState) stateName() string \n\nfunc (i *hasMoneyState) addMoney(money int) error \n\nfunc (i *hasMoneyState) enterAmount(money int) error \n\nfunc (i *hasMoneyState) enterPin(pin int) error \n\nfunc (i *hasMoneyState) dispenseCash(money int) error \n```", "```go\ntype amountEnteredState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *amountEnteredState) stateName() string \n\nfunc (i *amountEnteredState) addMoney(money int) error \n\nfunc (i *amountEnteredState) enterAmount(money int) error \n\nfunc (i *amountEnteredState) enterPin(pin int) error \n\nfunc (i *amountEnteredState) dispenseCash(money int) error\n```", "```go\ntype pinEnteredState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *pinEnteredState) stateName() string \n\nfunc (i *pinEnteredState) addMoney(money int) error \n\nfunc (i *pinEnteredState) enterAmount(money int) error \n\nfunc (i *pinEnteredState) enterPin(pin int) error \n\nfunc (i *pinEnteredState) dispenseCash(money int) error\n```", "```go\npackage main\n\nimport \"fmt\"\n\ntype atmMachine struct {\n\thasMoney      state\n\tnoMoney       state\n\tamountEntered state\n\tpinEntered    state\n\n\tcurrentState state\n\n\ttotalMoney int\n}\n\nfunc newATMMachine(totalMoney int) *atmMachine {\n\ta := &atmMachine{\n\t\ttotalMoney: totalMoney,\n\t}\n\thasMoneyState := &hasMoneyState{\n\t\tatmMachine: a,\n\t}\n\tnoMoneyState := &noMoneyState{\n\t\tatmMachine: a,\n\t}\n\tamountEnteredState := &amountEnteredState{\n\t\tatmMachine: a,\n\t}\n\tpinEnteredState := &pinEnteredState{\n\t\tatmMachine: a,\n\t}\n\n\ta.setState(hasMoneyState)\n\ta.hasMoney = hasMoneyState\n\ta.noMoney = noMoneyState\n\ta.amountEntered = amountEnteredState\n\ta.pinEntered = pinEnteredState\n\treturn a\n}\n\nfunc (v *atmMachine) addMoney(money int) error {\n\treturn v.currentState.addMoney(money)\n}\n\nfunc (v *atmMachine) enterAmount(money int) error {\n\treturn v.currentState.enterAmount(money)\n}\n\nfunc (v *atmMachine) enterPin(money int) error {\n\treturn v.currentState.enterPin(money)\n}\nfunc (v *atmMachine) dispenseCash(money int) error {\n\treturn v.currentState.dispenseCash(money)\n}\n\nfunc (v *atmMachine) setState(s state) {\n\tv.currentState = s\n}\nfunc (v *atmMachine) incrementMoney(money int) {\n\tfmt.Printf(\"Adding %d money:\\n\", money)\n\tv.totalMoney = v.totalMoney + money\n}\n\nfunc (v *atmMachine) decrementMoney(money int) {\n\tfmt.Printf(\"Dispensing %d cash:\\n\", money)\n\tv.totalMoney = v.totalMoney - money\n}\n\nfunc (v *atmMachine) checkAvailability(money int) error {\n\tfmt.Printf(\"Checking Availability\\n\")\n\tif money < v.totalMoney {\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"Not enough money\")\n}\n\nfunc (v *atmMachine) verifyPin(pin int) error {\n\tfmt.Println(\"Verifying Pin\")\n\t//Pin is always true\n\treturn nil\n}\n```", "```go\npackage main\n\ntype state interface {\n\tstateName() string\n\taddMoney(int) error\n\tenterAmount(int) error\n\tenterPin(int) error\n\tdispenseCash(int) error\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\ntype noMoneyState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *noMoneyState) stateName() string {\n\treturn \"noMoneyState\"\n}\n\nfunc (i *noMoneyState) addMoney(money int) error {\n\tfmt.Errorf(\"Add money in progress\")\n\ti.atmMachine.incrementMoney(money)\n\treturn nil\n}\n\nfunc (i *noMoneyState) enterAmount(money int) error {\n\treturn fmt.Errorf(\"Add money first\")\n}\n\nfunc (i *noMoneyState) enterPin(pin int) error {\n\treturn fmt.Errorf(\"Add money first\")\n}\nfunc (i *noMoneyState) dispenseCash(money int) error {\n\treturn fmt.Errorf(\"Add money first\")\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\ntype hasMoneyState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *hasMoneyState) stateName() string {\n\treturn \"hasMoneyState\"\n}\n\nfunc (i *hasMoneyState) addMoney(money int) error {\n\tfmt.Errorf(\"Add money in progress\")\n\ti.atmMachine.incrementMoney(money)\n\treturn nil\n}\n\nfunc (i *hasMoneyState) enterAmount(money int) error {\n\tfmt.Errorf(\"Amount is entered. Amount:%n\", money)\n\terr := i.atmMachine.checkAvailability(money)\n\tif err != nil {\n\t\treturn err\n\t}\n\ti.atmMachine.setState(i.atmMachine.amountEntered)\n\treturn nil\n}\n\nfunc (i *hasMoneyState) enterPin(pin int) error {\n\treturn fmt.Errorf(\"First enter the amount\")\n}\nfunc (i *hasMoneyState) dispenseCash(money int) error {\n\treturn fmt.Errorf(\"First enter the amount\")\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\ntype amountEnteredState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *amountEnteredState) stateName() string {\n\treturn \"amountEnteredState\"\n}\n\nfunc (i *amountEnteredState) addMoney(money int) error {\n\treturn fmt.Errorf(\"Dispensing process in progress\")\n}\n\nfunc (i *amountEnteredState) enterAmount(money int) error {\n\treturn fmt.Errorf(\"Amount already entered\")\n}\n\nfunc (i *amountEnteredState) enterPin(pin int) error {\n\terr := i.atmMachine.verifyPin(pin)\n\tif err != nil {\n\t\treturn err\n\t}\n\ti.atmMachine.setState(i.atmMachine.pinEntered)\n\treturn nil\n}\nfunc (i *amountEnteredState) dispenseCash(money int) error {\n\treturn fmt.Errorf(\"First Enter Pin\")\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\ntype pinEnteredState struct {\n\tatmMachine *atmMachine\n}\n\nfunc (i *pinEnteredState) stateName() string {\n\treturn \"pinEnteredState\"\n}\n\nfunc (i *pinEnteredState) addMoney(money int) error {\n\treturn fmt.Errorf(\"Dispensing process in progress\")\n}\n\nfunc (i *pinEnteredState) enterAmount(money int) error {\n\treturn fmt.Errorf(\"Amount and pin already entered\")\n}\n\nfunc (i *pinEnteredState) enterPin(pin int) error {\n\treturn fmt.Errorf(\"Pin already entered\")\n}\nfunc (i *pinEnteredState) dispenseCash(money int) error {\n\ti.atmMachine.decrementMoney(money)\n\ti.atmMachine.setState(i.atmMachine.hasMoney)\n\treturn nil\n}\n```", "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tatmMachine := newATMMachine(100)\n\n\tfmt.Println(\"<<<<<First Transactin: Withdrawing amount 10>>>> \")\n\n\tfmt.Printf(\"ATM current state %s\\n\\n\", atmMachine.currentState.stateName())\n\terr := atmMachine.enterAmount(10)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\n\t}\n\tfmt.Printf(\"Amount Entered: %d\\n\", 10)\n\tfmt.Printf(\"Atm Total Money: %d\\n\", atmMachine.totalMoney)\n\tfmt.Printf(\"ATM current state %s\\n\\n\", atmMachine.currentState.stateName())\n\n\terr = atmMachine.enterPin(1234)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\t}\n\tfmt.Printf(\"Pin Entered: %d\\n\", 10)\n\tfmt.Printf(\"ATM Total Money: %d\\n\", atmMachine.totalMoney)\n\tfmt.Printf(\"ATM current state %s\\n\\n\", atmMachine.currentState.stateName())\n\n\terr = atmMachine.dispenseCash(10)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\t}\n\tfmt.Printf(\"Dispense Cash: %d\\n\", 10)\n\tfmt.Printf(\"ATM Total Money: %d\\n\", atmMachine.totalMoney)\n\tfmt.Printf(\"ATM current state %s\\n\\n\", atmMachine.currentState.stateName())\n\n\tfmt.Println()\n\n\tfmt.Println(\"<<<<<Second Transactin: Admin adding 50>>>>\")\n\terr = atmMachine.addMoney(50)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\t}\n\tfmt.Printf(\"Atm Total Money: %d\\n\", atmMachine.totalMoney)\n\tfmt.Printf(\"ATM current state %s\\n\\n\", atmMachine.currentState.stateName())\n\n\tfmt.Println(\"<<<<<Third Transaction. Withdrawing amount 200>>>>\")\n\terr = atmMachine.enterAmount(200)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\n\t}\n}\n```", "```go\n<<<<<First Transactin: Withdrawing amount 10>>>> \nATM current state hasMoneyState\n\nChecking Availability\nAmount Entered: 10\nAtm Total Money: 100\nATM current state amountEnteredState\n\nVerifying Pin\nPin Entered: 10\nATM Total Money: 100\nATM current state pinEnteredState\n\nDispensing 10 cash:\nDispense Cash: 10\nATM Total Money: 90\nATM current state hasMoneyState\n\n<<<<<Second Transactin: Admin adding 50>>>>\nAdding 50 money:\nAtm Total Money: 140\nATM current state hasMoneyState\n\n<<<<<Third Transaction. Withdrawing amount 200>>>>\nChecking Availability\n2021/11/26 18:29:26 Not enough money\nexit status 1\n```"]