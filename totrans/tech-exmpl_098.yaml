- en: Program to check if a given linked list has a cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/program-linked-list-cycle/](https://techbyexample.com/program-linked-list-cycle/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objective is to if a given linked list has a cycle or not. A cycle exists
    in a linked list if  the last node in the linked list points to another node in
    the front
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31d74a94feb5baa6a07151b35d2b3abb.png)'
  prefs: []
  type: TYPE_IMG
- en: The above linked list has a cycle. Below is the approach we can follow
  prefs: []
  type: TYPE_NORMAL
- en: Have two pointers. One is the slow pointer and the other is a fast pointer.
    Both point to the head node initially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now move the slow pointer by 1 node and move the fast pointer by 2 nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If slow and fast pointers are the same at any point in time then the linked
    list has cyle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
