- en: Program for ugly number 2 in Go (Golang)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Golang 中的丑数 2 程序
- en: 原文：[https://techbyexample.com/program-for-ugly-number-2-in-go-golang/](https://techbyexample.com/program-for-ugly-number-2-in-go-golang/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/program-for-ugly-number-2-in-go-golang/](https://techbyexample.com/program-for-ugly-number-2-in-go-golang/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概述**'
- en: An ugly number is a number whose prime factors are limited to 2,3 and 5\. We
    have already seen a program where given a number n returns true if it is an ugly
    number otherwise returns false. Below is the link to that program [https://techbyexample.com/program-ugly-number/](https://techbyexample.com/program-ugly-number/)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 丑数是指其质因数仅限于 2、3 和 5 的数字。我们已经看到过一个程序，给定一个数字 n，判断它是否是丑数，如果是则返回 true，否则返回 false。以下是该程序的链接
    [https://techbyexample.com/program-ugly-number/](https://techbyexample.com/program-ugly-number/)
- en: In this tutorial, we will write a program where given a number n, find the nth
    ugly number
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将编写一个程序，给定一个数字 n，找到第 n 个丑数。
- en: '**Example 1**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example 2**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The idea is to use dynamic programming here. We will keep track of multiple
    of 2, 3, and 5\. The next ugly number will always be the minimum of these three.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的思路是使用动态规划。我们将追踪 2、3 和 5 的倍数。下一个丑数将始终是这三个数中的最小值。
- en: '**Program**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该程序：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的 Golang 高级教程。本系列教程内容详尽，我们已尽力通过示例覆盖所有概念。本教程适用于那些希望掌握 Golang 并深入理解其内容的读者
    – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式，那么这篇文章就是为你准备的 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，您还可以查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
