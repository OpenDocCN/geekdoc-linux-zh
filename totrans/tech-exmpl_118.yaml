- en: Interleaving String Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/interleaving-string-program/](https://techbyexample.com/interleaving-string-program/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs: []
  type: TYPE_NORMAL
- en: Three strings are given **s1**, **s2**, **s3**. Find if string **s3** is interleaving
    of string.
  prefs: []
  type: TYPE_NORMAL
- en: '**s3** will be an interleaving of string **s1** and **s2** if the below condition
    is satisfied'
  prefs: []
  type: TYPE_NORMAL
- en: s3 contains all characters of **s1** and **s2** and the order of all characters
    in individual strings is preserved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Recursive Solution**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the recursive solution for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you will notice the above program many subproblems are computed again and
    again hence the complexity of the above solution is exponential. Hence we can
    also use Dynamic Programming here to reduce the overall time complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic Programming Solution**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
