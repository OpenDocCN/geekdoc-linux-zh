- en: 'Interview Question: Design an Object Pool'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/design-object-pool/](https://techbyexample.com/design-object-pool/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '[Overview](#Overview "Overview")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[When we want to create a object pool](#When_we_want_to_create_a_object_pool
    "When we want to create a object pool")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[UML Diagram](#UML_Diagram "UML Diagram")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Low–Level Design](#Low%E2%80%93Level_Design "Low–Level Design")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Full Working Code:](#Full_Working_Code "Full Working Code:")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](#Conclusion "Conclusion")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Object Pool Design Pattern can be used to design an Object Pool. It is a
    creational design pattern in which a pool of objects is initialized and created
    beforehand and kept in a pool. As and when needed, a client can request an object
    from the pool, use it, and return it to the pool. The object in the pool is never
    destroyed. In this tutorial, we will look at
  prefs: []
  type: TYPE_NORMAL
- en: When we want to create a object pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UML diagram for the design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low-Level Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full Working Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When we want to create a object pool**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the cost to create the object of the class is high and the number of such
    objects that will be needed at a particular time is not much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -Let’s take the example of DB connections. Each of the connection object creation
    is the cost is high as there is network calls involved and also at a time not
    more than a certain connection might be needed. The object pool design pattern
    is perfectly suitable for such cases.
  prefs: []
  type: TYPE_NORMAL
- en: When the pool object is the immutable object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -Again take the example of DB connection again. A DB connection is an immutable
    object. Almost none of its property needs to be changed
  prefs: []
  type: TYPE_NORMAL
- en: For performance reasons. It will boost the application performance significantly
    since the pool is already created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UML Diagram**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the UML diagram of the Object Pool Design
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7551a768df2f1429bd40a7b24bbd4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is the overall idea
  prefs: []
  type: TYPE_NORMAL
- en: We have a **Pool** Class that does the management of **Pool** Objects. The **Pool**
    class is first initialized with a set of an already created fixed number of pool
    objects. Then it supports lending, receiving back, and removing of pool objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an interface **iPoolOjbect** that represents the type of objects that
    will reside in the Pool. There will be different implementations of this interface
    depending upon the type of use case. For example, in the case of DB Connections,
    a DB connection will implement this **iPoolObject** interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a **Client** class that uses **Pool** class to loan a **Pool Object**.
    When it is done with the **Pool Object,** it returns it to the pool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**–**Level Design**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the low-level design expressed in the Go programming language. Later
    we will see a working example as well
  prefs: []
  type: TYPE_NORMAL
- en: '**iPoolObject Interface**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**DBConnection Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Pool Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Client Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the full working code if anyone is interested in the Go programming
    language
  prefs: []
  type: TYPE_NORMAL
- en: '**iPoolObject.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**dbconnection.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**pool.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**client.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Full Working Code:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the full working code in one file
  prefs: []
  type: TYPE_NORMAL
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is all about designing an Object Pool. Hope you have liked this article.
    Please share feedback in the comments
  prefs: []
  type: TYPE_NORMAL
