- en: Binary Tree Maximum Path Sum Program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二叉树最大路径和程序
- en: 原文：[https://techbyexample.com/binary-tree-maximum-path-sum/](https://techbyexample.com/binary-tree-maximum-path-sum/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/binary-tree-maximum-path-sum/](https://techbyexample.com/binary-tree-maximum-path-sum/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概览**'
- en: A  binary tree is given. The objective is to find the maximum Path Sum in that
    binary tree.  A path in a binary tree is a sequence of nodes that are connected
    to each other. Each node only appears once in the Maximum Path Sum
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个二叉树，目标是找到该二叉树中的最大路径和。二叉树中的路径是指一系列彼此相连的节点，每个节点在最大路径和中只能出现一次。
- en: '**Example 1**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '![](../Images/9a87d6b2a88fc41ddf4f755bc080acdf.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a87d6b2a88fc41ddf4f755bc080acdf.png)'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example 2**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '![](../Images/6c1876d0d5a5830a4bbf871b9fa3cdc9.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c1876d0d5a5830a4bbf871b9fa3cdc9.png)'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The idea is to track below four  values at every node
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的思路是在每个节点跟踪以下四个值。
- en: a = root.Val
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: a = root.Val
- en: b = root.Val + leftSubTreeMaxSum
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b = root.Val + leftSubTreeMaxSum
- en: c  = root.Val + rightSubTreeMaxSum
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: c = root.Val + rightSubTreeMaxSum
- en: d =  root.Val + leftSubTreeMaxSum+  rightSubTreeMaxSum
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d = root.Val + leftSubTreeMaxSum + rightSubTreeMaxSum
- en: Then
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后
- en: Max sum at a given node is given max of **(a,b,c,d)**
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定节点的最大路径和是**(a,b,c,d)**中的最大值。
- en: The return value in the recursive call would be a max of **(a,b,c)**.  Why?
    This is because only the path of a or b or c represents a path that can be taken
    into account at the parent node. d cannot be taken into account because it becomes
    an invalid path. To understand this with an example consider the binary tree in
    example two above. Path **5->3->6** cannot include parent node **-5** in its path
    because it becomes an invalid path.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归调用中的返回值将是**(a,b,c)**中的最大值。为什么？这是因为只有a、b或c的路径才是父节点可以考虑的路径，d不能考虑，因为它成为了无效路径。通过上面示例二的二叉树来理解这个问题。路径**5->3->6**不能包括父节点**-5**，因为它成为了无效路径。
- en: '**Program**'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
