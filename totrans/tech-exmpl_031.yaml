- en: Recover Binary Search Tree Program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复二叉搜索树程序
- en: 原文：[https://techbyexample.com/recover-binary-search-tree/](https://techbyexample.com/recover-binary-search-tree/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/recover-binary-search-tree/](https://techbyexample.com/recover-binary-search-tree/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概述**'
- en: The root of a binary search tree is given. Two nodes of the binary search tree
    have been swapped. We need to fix the binary tree and recover the original structure
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个二叉搜索树的根节点。二叉搜索树中有两个节点被交换了。我们需要修复二叉树并恢复其原始结构
- en: '**Program**'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。本系列教程内容详尽，我们尽力通过实例覆盖所有概念。本教程适合那些希望深入学习并掌握 Golang
    的人 – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式。如果是的话，那么这篇文章适合你 – [Golang 中的所有设计模式](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
