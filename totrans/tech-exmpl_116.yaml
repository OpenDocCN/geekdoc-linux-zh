- en: Check if a given tree is a Binary Search Tree
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查给定的树是否是二叉搜索树
- en: 原文：[https://techbyexample.com/tree-is-bst/](https://techbyexample.com/tree-is-bst/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://techbyexample.com/tree-is-bst/](https://techbyexample.com/tree-is-bst/)
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**概述**'
- en: We can use the below strategy to know if a given tree is a BST.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下策略来判断给定的树是否是二叉搜索树（BST）。
- en: For a given current node, if the left and right subtree are BST
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定的当前节点，如果左子树和右子树都是二叉搜索树（BST）
- en: The maximum value in the left subtree is less than the current node value
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左子树中的最大值小于当前节点值
- en: The minimum value in the right subtree is greater than the current node value
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右子树中的最小值大于当前节点值
- en: Here is the program for the same.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相应的程序。
- en: '**Program**'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[bst](https://techbyexample.com/tag/bst/)*   [tree](https://techbyexample.com/tag/tree/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bst](https://techbyexample.com/tag/bst/)*   [树](https://techbyexample.com/tag/tree/)'
