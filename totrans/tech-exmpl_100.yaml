- en: Check if two given strings are anagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/anagrams-two-string/](https://techbyexample.com/anagrams-two-string/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **anagram** is a word or phrase formed by rearranging the letters of a different
    word or phrase, typically using all the original letters exactly once. For example,
    the word *anagram* itself can be rearranged into *nagaram*, also the word *binary* into *brainy*^, and
    the word *adobe* into the *abode*.
  prefs: []
  type: TYPE_NORMAL
- en: For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here is the idea of how to do it. Create a map of string to int. Now
  prefs: []
  type: TYPE_NORMAL
- en: Traverse the first string and increase the count of each character in the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traverse the second string and decrease the count of each character in the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traverse the first string again and if for any character the count is non-zero
    in the map then return false.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end return true
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
