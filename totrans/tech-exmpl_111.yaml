- en: Design a Vending Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/vending-machine-design/](https://techbyexample.com/vending-machine-design/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs: []
  type: TYPE_NORMAL
- en: The objective is to design a vending machine. Please note that designing a Vending
    Machine is an Object-Oriented Problem. It is not a distributed system problem.
    So we need to approach it that way. Below are the requirements
  prefs: []
  type: TYPE_NORMAL
- en: A vending machine will allow users to select the item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vending machine will allow the admin to add the items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the item is selected the user can insert the money. The item will be dispensed
    after money is entered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vending machine will have different states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For simplicity, let’s assume that vending machine only has one type of item
    or product. Also for simplicity let’s assume that a Vending Machine can be in
    4 different states
  prefs: []
  type: TYPE_NORMAL
- en: '**hasItem**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noItem**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**itemRequested**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hasMoney**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A vending machine will also have different actions. Again for simplicity
    lets assume that there are only four actions:**'
  prefs: []
  type: TYPE_NORMAL
- en: '***   **Select the item**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add the item**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insert Money**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dispense Item**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use a state design pattern here to design the vending machine. State
    design pattern is a behavioral design pattern that is based on a Finite State
    Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now the question is why we are using a State Design Pattern to design a Vending
    Machine? Below are two reasons
  prefs: []
  type: TYPE_NORMAL
- en: State design pattern is used when an object can be in many different states. Depending
    upon the current request the object needs to change its current state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vending machines can be in many different states. A Vending Machine will move
    from one state to another. Let’s say Vending Machine is in **itemRequested** then
    it will move to **hasMoney** state once the action “Insert Money” is done
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: State design pattern is used when an object will have different responses to
    the same request depending upon the current state. Using state design pattern
    here will prevent a lot of conditional statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example in the case of Vending Machine, if a user wants to purchase an item
    then the machine will proceed if it is **hasItemState** or it will reject if it
    is in **noItemState**. If you notice here that the Vending Machine on the request
    of purchase of an item gives two different responses depending upon whether it
    is in **hasItemState** or **noItemState.** With this approach, our code will not
    have any kind of conditional statement. All the logic is being handled by concrete
    state implementations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UML Diagram**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the UML diagram of the Vending Machine
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ac015f70eb1afb4272c287d586fe1503.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is the overall idea
  prefs: []
  type: TYPE_NORMAL
- en: We will have an interface “State” which defines signatures of functions which
    represents action in the context of Vending Machine. Below are the actions function
    signatures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: addItem(int) error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: requestItem() error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: insertMoney(money int) error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: dispenseItem() error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of the concrete states implements all 4 above functions and either move
    to another state on these actions or gives some response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the concrete states also embeds a pointer to the current Vending Machine
    object so that state transition can happen on that object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**–**Level Design**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the low-level design expressed in the Go programming language. Later
    we will see a working example as well
  prefs: []
  type: TYPE_NORMAL
- en: '**Vending Machine Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**State Interface**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**NoItem State Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Item Requested State Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Has Item State Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Has Money State Class**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the full working code if anyone is interested in the Go programming
    language
  prefs: []
  type: TYPE_NORMAL
- en: '**vendingMachine.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**state.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**noItemState.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**itemRequestedState.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**hasItemState.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**hasMoneyState.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]**'
  prefs: []
  type: TYPE_NORMAL
