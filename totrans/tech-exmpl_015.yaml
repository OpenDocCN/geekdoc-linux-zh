- en: Design a hit counter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://techbyexample.com/system-design-hit-counter/](https://techbyexample.com/system-design-hit-counter/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Overview**'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective is to design a hit counter that will record the number of visits
    to a website till the last 5 min. It is a tricky question. Your design should
    be able to answer the below query in general
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Number of hits for the last n minutes where 1 < = n <= 5
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution described in this tutorial could also be extended to n minutes
    where n is greater than 5.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Idea is to have a data structure that could record the hit for each minute in
    the last five minutes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: For that, we can have below data structure
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Counter Array – An array of integers of length 5.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamp Array – An array of integers of length 5.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counter[i] will store the count of hits in the ith minute
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Timestamp[i] will store the last timestamp of a hit in the ith minute. It will
    be a number that will represent the epoch timestamp in min.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Below will be the algorithm
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Get the epoch timestamp in min for the given timestamp. Let this be called **timestamp_epoch**
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Divide that epoch timestamp by 5 and take the remainder. Let this remainder
    be called **I**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If timestamp[i] = **timestamp_epoch** then it means that the previous hit for
    the ith minute happened in the same minute. Therefore increase the counter. Basically
    do counter[i]++
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If timestamp[i] != **timestamp_epoch** then it means that the last hit for the
    ith minute happened during a different minute. Therefore we need to reset the
    counter. Basically do counter[i] =1
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the code for the same
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s understand it with an example as well
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: During start counter[i] = 0 for i =0 to 4\. Also timestamp[i] = 0 for i =0 to
    4
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s say the current epoch timestamp is in min is 1000\. Let this be called
    **timestamp_epoch**
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s say there is one hit in the first minute
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**i = 1000%5**  which is 0'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp[i]** is 0\. So **timestamp[i]** is not equal to **timestamp_epoch**.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do **counter[i]++**, which means counter[0] = 1
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **timestamp[i]** = 1000 which is the current timestamp in min. So counter
    and timestamp will be
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s say there is another hit in the first minute
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i = 1000%5  which is 0
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: timestamp[i] is 1\. So timestamp[i] is equal to **timestamp_epoch**.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do counter[i]++ which means counter[0] = 2
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set timestamp[0] = 1000 which is the current timestamp in min. So counter and
    timestamp will be
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s say there is another hit in the second minute when the timestamp in the
    minute was **1001**
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i = 1001%5  which is 1
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: timestamp[1] is 0 currently. So timestamp[1] is not equal to **timestamp_epoch**.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do counter[1]++ which means counter[1] = **timestamp_remainder**
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set timestamp[1] = 1001 which is **timestamp_epoch** in min. So counter and
    timestamp will be
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now let’s say there is another hit at 6 min. At that time the current epoch
    timestamp in min will be 1005\. Why 1005? 1000 is the first minute then 1005 will
    be the sixth min)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i = 1005%5  which is 0
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: timestamp[0] is 1000\. So timestamp[0] is not equal to **timestamp_epoch**.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: timestamp[0] 是 1000。所以 timestamp[0] 不等于 **timestamp_epoch**。
- en: Reset counter. Do counter[0]=1 which means counter[0] = 1
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置计数器。将 counter[0] 设置为 1，这意味着 counter[0] = 1
- en: Set timestamp[0] = 1005 which is **timestamp_epoch** in min. So counter and
    timestamp will be
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 timestamp[0] 设置为 1005，这在分钟单位中是 **timestamp_epoch**。因此计数器和时间戳将是
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At any given time to get the number of hits per minute, we can simply add all
    the entries in the counter array.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定时刻，要获取每分钟的点击次数，我们可以简单地将计数器数组中的所有条目加起来。
- en: '**Conclusion**'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about designing a Hit Counter. Hope you have liked this article.
    Please share feedback in the comments
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是设计 Hit Counter 的全部内容。希望你喜欢这篇文章。请在评论中分享反馈。
