["```go\nInput: 1->2->3->4->5\nNode to be deleted from the end: 2\nOutput: 1->2->3->5\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tfirst.AddFront(5)\n\tfirst.AddFront(4)\n\tfirst.AddFront(3)\n\tfirst.AddFront(2)\n\tfirst.AddFront(1)\n\n\tfirst.Head.Traverse()\n\tremoveNthFromEnd(first.Head, 2)\n\tfmt.Println(\"\")\n\tfirst.Head.Traverse()\n\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\tsize := lengthOfList(head)\n\n\tnumberFront := size - n + 1\n\n\tif numberFront < 1 {\n\t\treturn head\n\t}\n\n\tif numberFront == 1 {\n\t\treturn head.Next\n\t}\n\n\tif size == 1 {\n\t\treturn nil\n\t}\n\n\t//Get to the numberFront-1 node\n\tcurr := head\n\tfor i := 0; i < numberFront-2; i++ {\n\t\tcurr = curr.Next\n\t}\n\n\tprev := curr\n\n\tnodeToDelete := curr.Next\n\n\tif nodeToDelete != nil {\n\t\tnodeToDeleteNext := nodeToDelete.Next\n\t\tprev.Next = nodeToDeleteNext\n\t} else {\n\t\tprev.Next = nil\n\t}\n\n\treturn head\n}\n\nfunc lengthOfList(head *ListNode) int {\n\tsize := 0\n\tfor head != nil {\n\t\tsize = size + 1\n\t\thead = head.Next\n\t}\n\treturn size\n}\n```", "```go\n1\n2\n3\n4\n5\n\n1\n2\n3\n5\n```"]