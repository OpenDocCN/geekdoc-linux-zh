["```go\nos.command(cmd);\n```", "```go\nimport os\np=os.system(\"ls -l\")\nprint(p)\n```", "```go\nclass subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout\n=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=Non\ne, env=None, universal_newlines=False, startupinfo=None, creationflags=0)\n```", "```go\nimport subprocess\n\ncmd=\"uname\"\n\n'''\nsubprocess.PIPE - Special value that can be used as the \nstdin, stdout or stderr argument to Popen and indicates\n that a pipe to the standard stream should be opened.\n'''\n#calling method with OS command\nprocess = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)\noutput = process.stdout.read().strip()\nerror = process.stderr.read().strip()\nprocess.communicate()\nexit_code = process.returncode\n\n#you can process the output like below\nif len(output) > 0:\n    print('Output     : {}'.format(output))\n\n#you can pprocess the error like below.\nif len(error) > 0:\n    print('Error      : {}'.format(error))\n\n#you can take decision ased on command succcess or failureofthe command like below\nprint('Exit Code      : {}'.format(exit_code))\n\nif exit_code != 0:\n    raise Exception('Error executing command: {}. Exit Code: {}, Stdout: `{}`, Stderr: `{}`'.format(\n        ' '.join(command_components), exit_code, output, error)\n```", "```go\np = subprocess.Popen([\"p4\", \"login\", \"-s\"], stderr=subprocess.PIPE, stdout=subprocess.PIPE)\np.communicate()\nif p.returncode != 0:\n         sys.exit('Error: not logged into Perforce');\n```", "```go\np = subprocess.Popen(\"git ls-files\", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nstdout, stderr = p.communicate()\nif p.returncode != 0:\n\tsys.exit('Error: could not get repo files - %s' % stderr)\n```"]